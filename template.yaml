AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: A Slack bot and notification service for Jamf Pro administrators.

Parameters:

  CertificateArn:
    Type: String
    Description: The ARN for the certificate to use for the custom domain

  DomainName:
    Type: String
    Description: The custom domain name for the API

  EncryptionKeyParameter:
    Type: String
    Description: The alias for the database key stored in parameter store
    Default: /jackalope/encryptionKey

  SlackClientIdParameter:
    Type: String
    Description: The alias for the Slack app's Client ID in parameter store
    Default: /jackalope/slack/clientId

  SlackClientSecretParameter:
    Type: String
    Description: The alias for the Slack app's Client Secret in parameter store
    Default: /jackalope/slack/clientSecret

  SlackSigningSecretParameter:
    Type: String
    Description: The alias for the Slack app's Signing Secret in parameter store
    Default: /jackalope/slack/signingSecret

  KmsKeyId:
    Type: String
    Description: ID of the KMS key to decrypt parameter store values.

Resources:

# API Gateway Resources

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: EDGE

  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE

  ApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGateway
      - ApiGatewayProdStage
      - ApiCustomDomain
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref ApiGateway
      Stage: Prod

# SNS Topic

  ChannelEventsTopic:
    Type: AWS::SNS::Topic

  UserEventsTopic:
    Type: AWS::SNS::Topic

  JamFProEventsTopic:
    Type: AWS::SNS::Topic

# Database

  TeamsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: team_id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true

  ChannelsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: team_id
          AttributeType: S
        - AttributeName: channel_id
          AttributeType: S
      KeySchema:
        - AttributeName: team_id
          KeyType: HASH
        - AttributeName: channel_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true

# Slack Install Lambda Functions

  SlackInstall:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/install
      Handler: install.lambda_handler
      Environment:
        Variables:
          DOMAIN_NAME: !Ref DomainName
          CLIENT_ID_PARAM: !Ref SlackClientIdParameter
      Policies:
        Statement:
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jackalope*'
      Events:
        SlackInstall:
          Type: Api
          Properties:
            Path: /slack/install
            Method: get
            RestApiId: !Ref ApiGateway

  SlackOAuthRedirect:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/oauth_redirect
      Handler: oauth_redirect.lambda_handler
      Timeout: 30
      Environment:
        Variables:
          DOMAIN_NAME: !Ref DomainName
          CLIENT_ID_PARAM: !Ref SlackClientIdParameter
          CLIENT_SECRET_PARAM: !Ref SlackClientSecretParameter
          ENC_KEY_PARAM: !Ref EncryptionKeyParameter
          TEAMS_TABLE: !Ref TeamsTable
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TeamsTable}'
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jackalope*'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
      Events:
        SlackOAuthRedirect:
          Type: Api
          Properties:
            Path: /slack/oauth/redirect
            Method: get
            RestApiId: !Ref ApiGateway

# Slack Event Lambda Functions

  SlackEventsApi:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/slack_events/api
      Handler: api.lambda_handler
      Environment:
        Variables:
          CHANNEL_EVENTS_TOPIC: !Ref ChannelEventsTopic
          SIGNING_SECRET_PARAM: !Ref SlackSigningSecretParameter
          USER_EVENTS_TOPIC: !Ref UserEventsTopic
      Policies:
        Statement:
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jackalope*'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
          - Effect: Allow
            Action: sns:Publish
            Resource:
              - !Ref ChannelEventsTopic
              - !Ref UserEventsTopic
      Events:
        SlackEvents:
          Type: Api
          Properties:
            Path: /slack/events
            Method: post
            RestApiId: !Ref ApiGateway

  ChannelEventsProcess:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/slack_events/channel_process
      Handler: process.lambda_handler
      Timeout: 30
      Environment:
        Variables:
          CHANNELS_TABLE: !Ref ChannelsTable
          ENC_KEY_PARAM: !Ref EncryptionKeyParameter
          TEAMS_TABLE: !Ref TeamsTable
      Policies:
        Statement:
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jackalope*'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
          - Effect: Allow
            Action: dynamodb:GetItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TeamsTable}'
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ChannelsTable}'
      Events:
        SnsTopic:
          Type: SNS
          Properties:
            Topic: !Ref UserEventsTopic

  UserEventsProcess:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/slack_events/user_process
      Handler: process.lambda_handler
      Timeout: 30
      Environment:
        Variables:
          TEAMS_TABLE: !Ref TeamsTable
          CHANNELS_TABLE: !Ref ChannelsTable
      Policies:
        Statement:
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jackalope*'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
          - Effect: Allow
            Action: dynamodb:GetItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TeamsTable}'
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ChannelsTable}'
      Events:
        SnsTopic:
          Type: SNS
          Properties:
            Topic: !Ref UserEventsTopic

# Jamf Pro Event Lambda Functions

  JamfProEventsApi:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/jamfpro_events/api
      Handler: api.lambda_handler
      Environment:
        Variables:
          JAMFPRO_EVENTS_TOPIC: !Ref JamFProEventsTopic
      Policies:
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref JamFProEventsTopic
      Events:
        SlackEvents:
          Type: Api
          Properties:
            Path: /jamfpro/events/{channel_id}
            Method: post
            RestApiId: !Ref ApiGateway

  JamfProEventsProcess:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/jamfpro_events/process
      Handler: process.lambda_handler
      Timeout: 30
      Environment:
        Variables:
          TEAMS_TABLE: !Ref TeamsTable
          CHANNELS_TABLE: !Ref ChannelsTable
      Policies:
        Statement:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:Query
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ChannelsTable}'
      Events:
        SnsTopic:
          Type: SNS
          Properties:
            Topic: !Ref JamFProEventsTopic

# Slack Interactions Lambda Functions

  SlackInteractionApi:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/interaction/api
      Handler: api.lambda_handler
      Environment:
        Variables:
          EVENTS_TOPIC: !Ref UserEventsTopic
      Policies:
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref UserEventsTopic
      Events:
        SlackInteraction:
          Type: Api
          Properties:
            Path: /slack/interaction
            Method: post
            RestApiId: !Ref ApiGateway
