AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: A trading card assistant for JNUC 2018

Parameters:

  CertificateArn:
    Type: String
    Description: The ARN for the certificate to use for the custom domain

  DomainName:
    Type: String
    Description: The custom domain name for the API

  DatabaseMasterUsername:
    Type: String
    Description: The master username to set for the Aurora MySQL database

  DatabaseMasterPassword:
    Type: String
    Description: The master password to set for the Aurora MySQL database
    NoEcho: true

  DatabaseSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets for use by the Aurora MySQL database

  DatabaseSchemaVersion:
    Type: Number
    Description: A version value for the database schema to trigger an update

  LambdaSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Security groups to assign VPC deployed Lambdas

  SlackClientId:
    Type: String
    Description: The Slack application's Client ID
    NoEcho: true

  SlackClientSecret:
    Type: String
    Description: The Slack application's Client Secret
    NoEcho: true

Resources:

# API Gateway Resources

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: EDGE

      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "/slack/events":
            post:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SlackEvents.Arn}/invocations
              responses: {}

          "/slack/install":
            get:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SlackInstall.Arn}/invocations
              responses: {}

          "/slack/oauth/redirect":
            get:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SlackOAuthRedirect.Arn}/invocations
              responses: {}

          "/dev/database":
            get:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DevDatabase.Arn}/invocations
              responses: {}

  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE

  ApiBasePath:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGateway
      - ApiGatewayProdStage
      - ApiCustomDomain
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref ApiGateway
      Stage: Prod

# SNS Topic

  EventsTopic:
    Type: AWS::SNS::Topic

# Database

  Database:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      EngineMode: serverless
      DatabaseName: jamfthegathering
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      StorageEncrypted: true
      ScalingConfiguration:
        MinCapacity: 2
        MaxCapacity: 4
        AutoPause: true
        SecondsUntilAutoPause: 300
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for the Database"
      DBSubnetGroupName: !Sub '${AWS::StackName}-db-sg'
      SubnetIds: !Ref DatabaseSubnets

# Database Initialization

  DatabaseInitializer:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/cloudformation/database_initializer
      Handler: database_initializer.lambda_handler
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: !Ref LambdaSecurityGroups
        SubnetIds: !Ref DatabaseSubnets
      Environment:
        Variables:
          DATABASE_ENDPOINT: !GetAtt Database.Endpoint.Address
          DATABASE_PORT: !GetAtt Database.Endpoint.Port
          DATABASE_USERNAME: !Ref DatabaseMasterUsername
          DATABASE_PASSWORD: !Ref DatabaseMasterPassword
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
            Resource: '*'

  DatabaseInitializerResource:
    Type: Custom::DatabaseInitializer
    Properties:
      ServiceToken: !GetAtt DatabaseInitializer.Arn
      DatabaseSchemaVersion: !Ref DatabaseSchemaVersion

# API Lambda Functions

  SlackEvents:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/events/api
      Handler: api.lambda_handler
      Environment:
        Variables:
          EVENTS_TOPIC: !Ref EventsTopic
      Policies:
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref EventsTopic
      Events:
        SlackEvents:
          Type: Api
          Properties:
            Path: /slack/events
            Method: post
            RestApiId: !Ref ApiGateway

  SlackInstall:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/install
      Handler: install.lambda_handler
      Environment:
        Variables:
          DOMAIN_NAME: !Ref DomainName
          CLIENT_ID: !Ref SlackClientId
      Events:
        SlackInstall:
          Type: Api
          Properties:
            Path: /slack/install
            Method: get
            RestApiId: !Ref ApiGateway

  SlackOAuthRedirect:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/oauth_redirect
      Handler: oauth_redirect.lambda_handler
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: !Ref LambdaSecurityGroups
        SubnetIds: !Ref DatabaseSubnets
      Environment:
        Variables:
          DOMAIN_NAME: !Ref DomainName
          CLIENT_ID: !Ref SlackClientId
          CLIENT_SECRET: !Ref SlackClientSecret
          DATABASE_ENDPOINT: !GetAtt Database.Endpoint.Address
          DATABASE_PORT: !GetAtt Database.Endpoint.Port
          DATABASE_USERNAME: !Ref DatabaseMasterUsername
          DATABASE_PASSWORD: !Ref DatabaseMasterPassword
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
            Resource: '*'
      Events:
        SlackOAuthRedirect:
          Type: Api
          Properties:
            Path: /slack/oauth/redirect
            Method: get
            RestApiId: !Ref ApiGateway

# Event Processing Lambda Functions

  SlackUserEvents:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/events/user_events
      Handler: user_events.lambda_handler
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: !Ref LambdaSecurityGroups
        SubnetIds: !Ref DatabaseSubnets
      Environment:
        Variables:
          DATABASE_ENDPOINT: !GetAtt Database.Endpoint.Address
          DATABASE_PORT: !GetAtt Database.Endpoint.Port
          DATABASE_USERNAME: !Ref DatabaseMasterUsername
          DATABASE_PASSWORD: !Ref DatabaseMasterPassword
      Policies:
        Statement:
        - Effect: Allow
          Action:
          - ec2:DescribeNetworkInterfaces
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          Resource: '*'
      Events:
        SnsTopic:
          Type: SNS
          Properties:
            Topic: !Ref EventsTopic

# Dev Testing Functions

  DevDatabase:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.6
      CodeUri: ./src/functions/dev/database
      Handler: dev_database.lambda_handler
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: !Ref LambdaSecurityGroups
        SubnetIds: !Ref DatabaseSubnets
      Environment:
        Variables:
          DATABASE_ENDPOINT: !GetAtt Database.Endpoint.Address
          DATABASE_PORT: !GetAtt Database.Endpoint.Port
          DATABASE_USERNAME: !Ref DatabaseMasterUsername
          DATABASE_PASSWORD: !Ref DatabaseMasterPassword
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
            Resource: '*'
      Events:
        SlackOAuthRedirect:
          Type: Api
          Properties:
            Path: /dev/database
            Method: get
            RestApiId: !Ref ApiGateway
